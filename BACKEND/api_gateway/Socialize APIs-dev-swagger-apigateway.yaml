---
swagger: "2.0"
info:
  description: "Rest APIs for Socialize application"
  version: "1.0.0"
  title: "Socialize APIs"
host: "4xk070et44.execute-api.us-east-1.amazonaws.com"
basePath: "/dev"
schemes:
- "https"
paths:
  /event/all:
    get:
      operationId: "getAllEvent"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "auth"
        in: "header"
        required: false
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/GetAllEventResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        "400":
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
    options:
      consumes:
      - "application/json"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /event/create:
    post:
      operationId: "createEvent"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "auth"
        in: "header"
        required: true
        type: "string"
      - in: "body"
        name: "CreateEventMeetupStudyGroupRequest"
        required: true
        schema:
          $ref: "#/definitions/CreateEventMeetupStudyGroupRequest"
      responses:
        "201":
          description: "201 response"
          schema:
            $ref: "#/definitions/CreateEventMeetupStudyGroupResponse"
        "400":
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
    options:
      consumes:
      - "application/json"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /event/recommendations:
    get:
      operationId: "getEventRecommendations"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "auth"
        in: "header"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/GetAllEventResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        "400":
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
    options:
      consumes:
      - "application/json"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /event/register:
    post:
      operationId: "registerEvent"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "auth"
        in: "header"
        required: true
        type: "string"
      - in: "body"
        name: "EventRegistrationRequest"
        required: true
        schema:
          $ref: "#/definitions/EventRegistrationRequest"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/RegistrationSuccessfulResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        "400":
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
    options:
      consumes:
      - "application/json"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /event/{eventId}:
    get:
      operationId: "getEvent"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "eventId"
        in: "path"
        required: true
        type: "string"
      - name: "auth"
        in: "header"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/GetEventResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        "400":
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
    options:
      consumes:
      - "application/json"
      parameters:
      - name: "eventId"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /homepage:
    get:
      operationId: "fetchUserHomepage"
      produces:
      - "application/json"
      parameters:
      - name: "auth"
        in: "header"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/HomepageResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        "401":
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:339234998270:function:homepage_get/invocations"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      consumes:
      - "application/json"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /login:
    post:
      operationId: "userLogin"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "LoginRequest"
        required: true
        schema:
          $ref: "#/definitions/LoginRequest"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/LoginResponse"
        "401":
          description: "401 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /meetup/all:
    get:
      operationId: "getAllMeetup"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "auth"
        in: "header"
        required: false
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/GetAllMeetupResponse"
        "400":
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /meetup/create:
    post:
      operationId: "createMeetup"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "auth"
        in: "header"
        required: true
        type: "string"
      - in: "body"
        name: "CreateEventMeetupStudyGroupRequest"
        required: true
        schema:
          $ref: "#/definitions/CreateEventMeetupStudyGroupRequest"
      responses:
        "201":
          description: "201 response"
          schema:
            $ref: "#/definitions/CreateEventMeetupStudyGroupResponse"
        "400":
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
    options:
      consumes:
      - "application/json"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /meetup/recommendations:
    get:
      operationId: "getMeetupRecommendations"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "auth"
        in: "header"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/GetAllMeetupResponse"
        "400":
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /meetup/register:
    post:
      operationId: "registerMeetup"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "auth"
        in: "header"
        required: true
        type: "string"
      - in: "body"
        name: "MeetupRegistrationRequest"
        required: true
        schema:
          $ref: "#/definitions/MeetupRegistrationRequest"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/RegistrationSuccessfulResponse"
        "400":
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /meetup/{meetupId}:
    get:
      operationId: "getMeetup"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "auth"
        in: "header"
        required: true
        type: "string"
      - name: "meetupId"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/GetMeetupResponse"
        "400":
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /polls/create:
    post:
      operationId: "createPoll"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "auth"
        in: "header"
        required: true
        type: "string"
      - in: "body"
        name: "CreatePollRequest"
        required: true
        schema:
          $ref: "#/definitions/CreatePollRequest"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/CreatePollResponse"
        "400":
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /polls/view/all:
    get:
      operationId: "getAllPolls"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "auth"
        in: "header"
        required: false
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/GetUserPollsResponse"
        "400":
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /polls/view/{pollId}:
    get:
      operationId: "getPoll"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "auth"
        in: "header"
        required: true
        type: "string"
      - name: "pollId"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/GetSingleUserPollResponse"
        "400":
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /profile/create:
    post:
      operationId: "createUserProfile"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "auth"
        in: "header"
        required: true
        type: "string"
      - in: "body"
        name: "CreateProfileRequest"
        required: true
        schema:
          $ref: "#/definitions/CreateProfileRequest"
      responses:
        "201":
          description: "201 response"
          schema:
            $ref: "#/definitions/CreateProfileResponse"
        "400":
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /profile/update:
    put:
      operationId: "updateUserProfile"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "auth"
        in: "header"
        required: true
        type: "string"
      - in: "body"
        name: "UpdateProfileRequest"
        required: true
        schema:
          $ref: "#/definitions/UpdateProfileRequest"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/UpdateProfileResponse"
        "400":
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /profile/view:
    get:
      operationId: "viewUserProfile"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "auth"
        in: "header"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/ViewProfileResponse"
        "404":
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /signup:
    post:
      operationId: "userSignup"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "SignupRequest"
        required: true
        schema:
          $ref: "#/definitions/SignupRequest"
      responses:
        "201":
          description: "201 response"
          schema:
            $ref: "#/definitions/SignupResponse"
        "400":
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /studygroup/all:
    get:
      operationId: "getAllStudygroup"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "auth"
        in: "header"
        required: false
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/GetAllStudyGroupResponse"
        "400":
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /studygroup/create:
    post:
      operationId: "createStudyGroup"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "auth"
        in: "header"
        required: true
        type: "string"
      - in: "body"
        name: "CreateEventMeetupStudyGroupRequest"
        required: true
        schema:
          $ref: "#/definitions/CreateEventMeetupStudyGroupRequest"
      responses:
        "201":
          description: "201 response"
          schema:
            $ref: "#/definitions/CreateEventMeetupStudyGroupResponse"
        "400":
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /studygroup/recommendations:
    get:
      operationId: "getStudygroupRecommendations"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "auth"
        in: "header"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/GetAllStudyGroupResponse"
        "400":
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /studygroup/register:
    post:
      operationId: "registerStudyGroup"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "auth"
        in: "header"
        required: true
        type: "string"
      - in: "body"
        name: "StudyGroupRegistrationRequest"
        required: true
        schema:
          $ref: "#/definitions/StudyGroupRegistrationRequest"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/RegistrationSuccessfulResponse"
        "400":
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /studygroup/{studygroupId}:
    get:
      operationId: "getStudygroup"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "auth"
        in: "header"
        required: true
        type: "string"
      - name: "studygroupId"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/GetStudyGroupResponse"
        "400":
          description: "400 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
definitions:
  UserStudyGroupDetails:
    type: "object"
    properties:
      studyGroupDate:
        type: "string"
      studyGroupTime:
        type: "string"
      studyGroupTitle:
        type: "string"
      studyGroupLocation:
        type: "string"
      type:
        type: "string"
        default: "study group"
  UserCreatedPollsDetails:
    type: "object"
    properties:
      pollCreatedDate:
        type: "string"
      pollCreatedTime:
        type: "string"
      title:
        type: "string"
  LoginRequest:
    type: "object"
    properties:
      uni:
        type: "string"
      password:
        type: "string"
  SignupRequest:
    type: "object"
    properties:
      uni:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
  UserMeetupDetails:
    type: "object"
    properties:
      meetupDate:
        type: "string"
      meetupTime:
        type: "string"
      meetupTitle:
        type: "string"
      meetupLocation:
        type: "string"
      type:
        type: "string"
        default: "meetup"
  GetAllMeetupResponse:
    type: "object"
    properties:
      meetupDetails:
        type: "array"
        items:
          $ref: "#/definitions/UserMeetupDetails"
  GetStudyGroupResponse:
    type: "object"
    properties:
      name:
        type: "string"
      details:
        type: "string"
      time:
        type: "string"
      location:
        type: "string"
  CreatePollResponse:
    type: "object"
    properties:
      message:
        type: "string"
  CreateEventMeetupStudyGroupResponse:
    type: "object"
    properties:
      message:
        type: "string"
  RegistrationSuccessfulResponse:
    type: "object"
    properties:
      message:
        type: "string"
  PollLocationDetails:
    type: "object"
    properties:
      location:
        type: "string"
  UpdateProfileResponse:
    type: "object"
    properties:
      message:
        type: "string"
  CreateEventMeetupStudyGroupRequest:
    type: "object"
    properties:
      category:
        type: "string"
      name:
        type: "string"
      details:
        type: "string"
      time:
        type: "string"
      location:
        type: "string"
      createpoll:
        type: "string"
  CreateProfileRequest:
    type: "object"
    properties:
      firstname:
        type: "string"
      lastname:
        type: "string"
      email:
        type: "string"
      contactNumber:
        type: "string"
      location:
        type: "string"
      interests:
        type: "array"
        items:
          $ref: "#/definitions/UserInterestDetails"
  UpdateProfileRequest:
    type: "object"
    properties:
      phoneNumber:
        type: "string"
      location:
        type: "string"
      interests:
        type: "array"
        items:
          $ref: "#/definitions/UserInterestDetails"
  UserInterestDetails:
    type: "object"
    properties:
      interestNumber:
        type: "integer"
      interestName:
        type: "string"
  GetMeetupResponse:
    type: "object"
    properties:
      name:
        type: "string"
      details:
        type: "string"
      time:
        type: "string"
      location:
        type: "string"
  GetUserPollsResponse:
    type: "array"
    items:
      type: "object"
      properties:
        title:
          type: "string"
        details:
          type: "string"
        interestedCount:
          type: "integer"
        category:
          type: "string"
        pollId:
          type: "string"
  LoginResponse:
    type: "object"
    properties:
      authToken:
        type: "string"
  GetSingleUserPollResponse:
    type: "object"
    properties:
      title:
        type: "string"
      details:
        type: "string"
      interestedCount:
        type: "integer"
      category:
        type: "string"
      pollId:
        type: "string"
      time_slots:
        type: "array"
        items:
          $ref: "#/definitions/PollTimeSlotsResults"
      location:
        type: "array"
        items:
          $ref: "#/definitions/PollLocationResults"
  HomepageResponse:
    type: "object"
    properties:
      username:
        type: "string"
      eventDetails:
        type: "array"
        items:
          $ref: "#/definitions/UserEventDetails"
      meetupDetails:
        type: "array"
        items:
          $ref: "#/definitions/UserMeetupDetails"
      studyGroupDetails:
        type: "array"
        items:
          $ref: "#/definitions/UserStudyGroupDetails"
      createdPollDetails:
        type: "array"
        items:
          $ref: "#/definitions/UserCreatedPollsDetails"
  Error:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      message:
        type: "string"
  EventRegistrationRequest:
    type: "object"
    properties:
      eventId:
        type: "string"
  ViewProfileResponse:
    type: "object"
    properties:
      firstname:
        type: "string"
      lastname:
        type: "string"
      email:
        type: "string"
      phoneNumber:
        type: "string"
      uni:
        type: "string"
      location:
        type: "string"
      interests:
        type: "array"
        items:
          $ref: "#/definitions/UserInterestDetails"
  CreateProfileResponse:
    type: "object"
    properties:
      message:
        type: "string"
  SignupResponse:
    type: "object"
    properties:
      authToken:
        type: "string"
      message:
        type: "string"
  PollLocationResults:
    type: "object"
    properties:
      location:
        type: "string"
      votedPercent:
        type: "number"
  PollTimeSlotsResults:
    type: "object"
    properties:
      time:
        type: "string"
      votedPercent:
        type: "number"
  GetEventResponse:
    type: "object"
    properties:
      name:
        type: "string"
      details:
        type: "string"
      time:
        type: "string"
      location:
        type: "string"
  PollTimeSlotsDetails:
    type: "object"
    properties:
      date:
        type: "string"
  GetAllEventResponse:
    type: "object"
    properties:
      eventDetails:
        type: "array"
        items:
          $ref: "#/definitions/UserEventDetails"
  UserEventDetails:
    type: "object"
    properties:
      eventDate:
        type: "string"
      eventTime:
        type: "string"
      eventTitle:
        type: "string"
      eventLocation:
        type: "string"
      type:
        type: "string"
        default: "event"
  MeetupRegistrationRequest:
    type: "object"
    properties:
      meetupId:
        type: "string"
  StudyGroupRegistrationRequest:
    type: "object"
    properties:
      studygroupId:
        type: "string"
  CreatePollRequest:
    type: "object"
    properties:
      category:
        type: "string"
      name:
        type: "string"
      details:
        type: "string"
      time_slots:
        type: "array"
        items:
          $ref: "#/definitions/PollTimeSlotsDetails"
      locations:
        type: "array"
        items:
          $ref: "#/definitions/PollLocationDetails"
  GetAllStudyGroupResponse:
    type: "object"
    properties:
      studyGroupDetails:
        type: "array"
        items:
          $ref: "#/definitions/UserStudyGroupDetails"
